{
  "main": {
    "id": "1be727c92b2e14f0",
    "type": "split",
    "children": [
      {
        "id": "30d24f811d1b06b5",
        "type": "tabs",
        "children": [
          {
            "id": "550c24418126d846",
            "type": "leaf",
            "state": {
              "type": "markdown",
              "state": {
                "file": "coding/cpp/opensource/详解C++高性能无锁队列的原理与实现.md",
                "mode": "source",
                "source": false
              }
            }
          }
        ]
      }
    ],
    "direction": "vertical"
  },
  "left": {
    "id": "daa24d14e57a5bba",
    "type": "split",
    "children": [
      {
        "id": "754e0d401164d83b",
        "type": "tabs",
        "children": [
          {
            "id": "97c141a77dfb8bbf",
            "type": "leaf",
            "state": {
              "type": "file-explorer",
              "state": {
                "sortOrder": "alphabetical"
              }
            }
          },
          {
            "id": "3024df327b38b2bb",
            "type": "leaf",
            "state": {
              "type": "search",
              "state": {
                "query": "",
                "matchingCase": false,
                "explainSearch": false,
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical"
              }
            }
          },
          {
            "id": "d16b970b8dd24de1",
            "type": "leaf",
            "state": {
              "type": "bookmarks",
              "state": {}
            }
          }
        ]
      }
    ],
    "direction": "horizontal",
    "width": 359.50390243530273
  },
  "right": {
    "id": "0ed372e18b255e27",
    "type": "split",
    "children": [
      {
        "id": "c082f741bebf07bf",
        "type": "tabs",
        "children": [
          {
            "id": "510cec816bc213d3",
            "type": "leaf",
            "state": {
              "type": "backlink",
              "state": {
                "file": "coding/cpp/opensource/详解C++高性能无锁队列的原理与实现.md",
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical",
                "showSearch": false,
                "searchQuery": "",
                "backlinkCollapsed": false,
                "unlinkedCollapsed": true
              }
            }
          },
          {
            "id": "cc3f2ddc07078680",
            "type": "leaf",
            "state": {
              "type": "outgoing-link",
              "state": {
                "file": "coding/cpp/opensource/详解C++高性能无锁队列的原理与实现.md",
                "linksCollapsed": false,
                "unlinkedCollapsed": true
              }
            }
          },
          {
            "id": "3ad12460d1b0e66d",
            "type": "leaf",
            "state": {
              "type": "tag",
              "state": {
                "sortOrder": "frequency",
                "useHierarchy": true
              }
            }
          },
          {
            "id": "22fe08aa63327cdd",
            "type": "leaf",
            "state": {
              "type": "outline",
              "state": {
                "file": "coding/cpp/opensource/详解C++高性能无锁队列的原理与实现.md"
              }
            }
          }
        ]
      }
    ],
    "direction": "horizontal",
    "width": 300,
    "collapsed": true
  },
  "left-ribbon": {
    "hiddenItems": {
      "switcher:Open quick switcher": false,
      "graph:Open graph view": false,
      "canvas:Create new canvas": false,
      "daily-notes:Open today's daily note": false,
      "templates:Insert template": false,
      "command-palette:Open command palette": false
    }
  },
  "active": "550c24418126d846",
  "lastOpenFiles": [
    "coding/cpp/opensource/in_推荐学习这个开源项目 (workflow).md",
    "0x99-image/Pasted image 20241003103414.png",
    "coding/cpp/opensource/coroutine/a_深入理解协程.md",
    "0x99-image/Pasted image 20241003103625.png",
    "0x99-image/Pasted image 20241003103608.png",
    "0x99-image/Pasted image 20241003103603.png",
    "0x99-image/Pasted image 20241003103553.png",
    "0x99-image/Pasted image 20241003103548.png",
    "0x99-image/Pasted image 20241003103541.png",
    "0x99-image/Pasted image 20241003103536.png",
    "0x99-image/Pasted image 20241003103530.png",
    "0x99-image/Pasted image 20241003103523.png",
    "coding/cpp/opensource/coroutine/an_协程简史，一文讲清楚协程的起源、发展和实现.md",
    "coding/cpp/opensource/coroutine/k_使用C++20协程和io_uring优雅地实现异步IO.md",
    "coding/cpp/opensource/coroutine/b_微信著名libco协程库原理剖析.md",
    "coding/cpp/opensource/coroutine/深入探索C++20的重要特性：从模块化到协程.md",
    "coding/cpp/opensource/coroutine/k_C++ 20 协程 Coroutine（3，剖析）.md",
    "coding/cpp/performance/k_太实用了！减少C++代码编译时间的方法，看完的都加薪了.md",
    "coding/cpp/performance/k_C++服务性能优化的道与术-道篇：阿姆达尔定律.md",
    "coding/cpp/冷门知识点：进程间通信如何加锁？.md",
    "coding/cpp/i_sizeof(void)之谜.md",
    "coding/cpp/a_从新手到专业人士：探索 C++ STL 以获得终极性能.md",
    "coding/cpp/i_new和delete一定要配对使用吗？.md",
    "coding/cpp/k_C++常见的三种内存破的场景和分析.md",
    "coding/cpp/n_C++ STL之合并、反转和其他算法.md",
    "coding/cpp/Chrome 浏览器开源背后的一盘大棋.md",
    "coding/cpp/low-level/a_10张图22段代码，万字长文带你搞懂虚拟内存模型和malloc内部原理.md",
    "coding/cpp/k_内存池设计与实现.md",
    "coding/cpp/comment/82页《现代C++教程》：高速上手C++ 11 14 17 20.md",
    "coding/cpp/low-level/a_C++ 内存管理（一）.md",
    "coding/cpp/comment/k_C++编程习惯与编程要点.md",
    "interview/a_C语言与C++面试知识总结.md",
    "coding/cpp/low-level/a_做引擎开发，更需要深入 C++ 内存管理.md",
    "coding/cpp/grammar/b_谈谈C++新标准带来的属性（Attribute）.md",
    "coding/cpp/grammar/k_解读C++即将迎来的重大更新（二）：C++20的核心语言.md",
    "coding/cpp/grammar/i_解读C++即将迎来的重大更新（一）：C++20的四大新特性.md",
    "coding/cpp/grammar/Untitled",
    "0x01-leetcode/2-dimensional/tree/binary-search-tree/delete",
    "0x01-leetcode/2-dimensional/tree/binary-search-tree/unique-BST",
    "0x01-leetcode/2-dimensional/tree/binary-search-tree",
    "0x01-leetcode/2-dimensional/tree/path-sum",
    "0x01-leetcode/2-dimensional/tree/traversal/postorder",
    "0x01-leetcode/2-dimensional/tree/traversal/inorder",
    "0x01-leetcode/2-dimensional/tree/traversal/preorder",
    "0x01-leetcode/2-dimensional/tree/traversal/level-order/populate-right-pointer",
    "0x01-leetcode/2-dimensional/tree/traversal/level-order",
    "0x01-leetcode/math-logic/Untitled.canvas",
    "0x01-leetcode/1-dimensional/linked-list/Untitled.canvas",
    "Untitled.canvas"
  ]
}