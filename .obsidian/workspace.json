{
  "main": {
    "id": "1be727c92b2e14f0",
    "type": "split",
    "children": [
      {
        "id": "30d24f811d1b06b5",
        "type": "tabs",
        "children": [
          {
            "id": "550c24418126d846",
            "type": "leaf",
            "state": {
              "type": "markdown",
              "state": {
                "file": "coding/os/linux/debug/k_深入理解Linux Netlink机制：进程间通信的关键.md",
                "mode": "source",
                "source": false
              }
            }
          }
        ]
      }
    ],
    "direction": "vertical"
  },
  "left": {
    "id": "daa24d14e57a5bba",
    "type": "split",
    "children": [
      {
        "id": "754e0d401164d83b",
        "type": "tabs",
        "children": [
          {
            "id": "97c141a77dfb8bbf",
            "type": "leaf",
            "state": {
              "type": "file-explorer",
              "state": {
                "sortOrder": "alphabetical"
              }
            }
          },
          {
            "id": "3024df327b38b2bb",
            "type": "leaf",
            "state": {
              "type": "search",
              "state": {
                "query": "内存泄漏-原因、避免以及定位",
                "matchingCase": false,
                "explainSearch": false,
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical"
              }
            }
          },
          {
            "id": "d16b970b8dd24de1",
            "type": "leaf",
            "state": {
              "type": "bookmarks",
              "state": {}
            }
          }
        ]
      }
    ],
    "direction": "horizontal",
    "width": 300
  },
  "right": {
    "id": "0ed372e18b255e27",
    "type": "split",
    "children": [
      {
        "id": "c082f741bebf07bf",
        "type": "tabs",
        "children": [
          {
            "id": "510cec816bc213d3",
            "type": "leaf",
            "state": {
              "type": "backlink",
              "state": {
                "file": "coding/os/linux/debug/k_深入理解Linux Netlink机制：进程间通信的关键.md",
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical",
                "showSearch": false,
                "searchQuery": "",
                "backlinkCollapsed": false,
                "unlinkedCollapsed": true
              }
            }
          },
          {
            "id": "cc3f2ddc07078680",
            "type": "leaf",
            "state": {
              "type": "outgoing-link",
              "state": {
                "file": "coding/os/linux/debug/k_深入理解Linux Netlink机制：进程间通信的关键.md",
                "linksCollapsed": false,
                "unlinkedCollapsed": true
              }
            }
          },
          {
            "id": "3ad12460d1b0e66d",
            "type": "leaf",
            "state": {
              "type": "tag",
              "state": {
                "sortOrder": "frequency",
                "useHierarchy": true
              }
            }
          },
          {
            "id": "22fe08aa63327cdd",
            "type": "leaf",
            "state": {
              "type": "outline",
              "state": {
                "file": "coding/os/linux/debug/k_深入理解Linux Netlink机制：进程间通信的关键.md"
              }
            }
          }
        ]
      }
    ],
    "direction": "horizontal",
    "width": 300,
    "collapsed": true
  },
  "left-ribbon": {
    "hiddenItems": {
      "switcher:Open quick switcher": false,
      "graph:Open graph view": false,
      "canvas:Create new canvas": false,
      "daily-notes:Open today's daily note": false,
      "templates:Insert template": false,
      "command-palette:Open command palette": false
    }
  },
  "active": "550c24418126d846",
  "lastOpenFiles": [
    "coding/os/linux/memory/LWN：针对每个调用点设置slab cache来防护heap-spray！.md",
    "coding/os/linux/memory/a_从内核世界透视 mmap 内存映射的本质（源码实现篇）.md",
    "coding/os/linux/debug/KFENCE/Linux Kfence 详解.md",
    "coding/os/linux/debug/内核内存错误检测工具KFENCE.md",
    "coding/os/linux/debug/KFENCE",
    "coding/os/linux/debug/b_手把手教你拦截Linux系统调用.md",
    "0x99-image/Pasted image 20240928195526.png",
    "0x99-image/Pasted image 20240928195543.png",
    "0x99-image/Pasted image 20240928195532.png",
    "coding/os/linux/debug/手把手教你 拦截系统调用.md",
    "coding/os/linux/debug/bn_案例分析 - 内存泄露的排查方法.md",
    "coding/os/linux/debug/i_钓鱼累了，写下断言怎么用.md",
    "coding/os/linux/debug/bt_掌握Linux内存故障追踪：技术指南.md",
    "coding/os/linux/debug/k_如何对一个【可执行程序】进行拦截和包装？.md",
    "coding/os/linux/debug/b_自己动手写一个GDB 设置断点（原理篇）.md",
    "0x99-image/Pasted image 20240928191447.png",
    "0x99-image/Pasted image 20240928191510.png",
    "0x99-image/Pasted image 20240928191504.png",
    "0x99-image/Pasted image 20240928191455.png",
    "coding/os/linux/debug/kt_带你快速对比SPI、UART、I2C通信的区别与应用！.md",
    "coding/os/linux/debug/k_内核内存泄漏探测器kmemleak(一).md",
    "coding/os/linux/debug/b_Linux内核调试的方式以及工具集锦.md",
    "0x99-image/Pasted image 20240928190647.png",
    "0x99-image/Pasted image 20240928190832.png",
    "0x99-image/Pasted image 20240928190754.png",
    "coding/os/linux/debug/b_Linux中对【库函数】的调用进行跟踪的 3 种【插桩】技巧.md",
    "coding/os/linux/debug/k_x86_64架构的函数调用链中为什么有些函数名称前面带有问号.md",
    "coding/os/linux/debug/c_Linux后台开发调试经验分享.md",
    "coding/os/linux/debug/memory-debug/a_内存泄漏-原因、避免以及定位.md",
    "coding/cpp/low-level/C C++ 内存泄漏-原因、避免以及定位.md",
    "coding/os/linux/debug/GDB/b_一文看懂 GDB底层实现原理.md",
    "coding/os/linux/debug/c_18 个终端命令行工具，绝对让你感觉自己像个10倍程序员.md",
    "coding/os/linux/debug/at_大厂干掉 OOM 的套路，不过如此.md",
    "coding/os/linux/debug/i_Linux kernel debug技巧----开启DEBUG选项.md",
    "coding/os/linux/debug/i_Linux下“用户空间修改设备寄存器或者物理内存”的实现.md",
    "coding/frontend/c_这本计算机神书，出 JavaScript 版了！.md",
    "coding/os/linux/debug/GDB/使用 GDB + Qemu 调试 Linux 内核.md",
    "coding/os/linux/debug/ASAN",
    "coding/os/linux/debug/trace",
    "coding/os/linux/debug/GDB",
    "self-improvement/hair/Untitled",
    "self-improvement/hair",
    "coding/os/linux/schedule/lock/lock-free",
    "coding/os/linux/schedule/lock/rwlock",
    "coding/os/linux/schedule/lock/mutex",
    "coding/os/linux/schedule/lock/spinlock",
    "0x01-leetcode/1-dimensional/linked-list/Untitled.canvas",
    "Untitled.canvas"
  ]
}