{
  "main": {
    "id": "1be727c92b2e14f0",
    "type": "split",
    "children": [
      {
        "id": "7816db194f2e089a",
        "type": "tabs",
        "children": [
          {
            "id": "e2d90085bd089a6c",
            "type": "leaf",
            "state": {
              "type": "markdown",
              "state": {
                "file": "coding/os/linux/memory/memory-model/a_聊聊内存模型与内存序.md",
                "mode": "source",
                "source": false
              }
            }
          }
        ]
      }
    ],
    "direction": "vertical"
  },
  "left": {
    "id": "daa24d14e57a5bba",
    "type": "split",
    "children": [
      {
        "id": "754e0d401164d83b",
        "type": "tabs",
        "children": [
          {
            "id": "97c141a77dfb8bbf",
            "type": "leaf",
            "state": {
              "type": "file-explorer",
              "state": {
                "sortOrder": "alphabetical"
              }
            }
          },
          {
            "id": "3024df327b38b2bb",
            "type": "leaf",
            "state": {
              "type": "search",
              "state": {
                "query": "",
                "matchingCase": false,
                "explainSearch": false,
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical"
              }
            }
          },
          {
            "id": "d16b970b8dd24de1",
            "type": "leaf",
            "state": {
              "type": "bookmarks",
              "state": {}
            }
          }
        ]
      }
    ],
    "direction": "horizontal",
    "width": 359.50390243530273
  },
  "right": {
    "id": "0ed372e18b255e27",
    "type": "split",
    "children": [
      {
        "id": "c082f741bebf07bf",
        "type": "tabs",
        "children": [
          {
            "id": "510cec816bc213d3",
            "type": "leaf",
            "state": {
              "type": "backlink",
              "state": {
                "file": "coding/os/linux/memory/memory-model/a_聊聊内存模型与内存序.md",
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical",
                "showSearch": false,
                "searchQuery": "",
                "backlinkCollapsed": false,
                "unlinkedCollapsed": true
              }
            }
          },
          {
            "id": "cc3f2ddc07078680",
            "type": "leaf",
            "state": {
              "type": "outgoing-link",
              "state": {
                "file": "coding/os/linux/memory/memory-model/a_聊聊内存模型与内存序.md",
                "linksCollapsed": false,
                "unlinkedCollapsed": true
              }
            }
          },
          {
            "id": "3ad12460d1b0e66d",
            "type": "leaf",
            "state": {
              "type": "tag",
              "state": {
                "sortOrder": "frequency",
                "useHierarchy": true
              }
            }
          },
          {
            "id": "22fe08aa63327cdd",
            "type": "leaf",
            "state": {
              "type": "outline",
              "state": {
                "file": "coding/os/linux/memory/memory-model/a_聊聊内存模型与内存序.md"
              }
            }
          }
        ]
      }
    ],
    "direction": "horizontal",
    "width": 300,
    "collapsed": true
  },
  "left-ribbon": {
    "hiddenItems": {
      "switcher:Open quick switcher": false,
      "graph:Open graph view": false,
      "canvas:Create new canvas": false,
      "daily-notes:Open today's daily note": false,
      "templates:Insert template": false,
      "command-palette:Open command palette": false
    }
  },
  "active": "e2d90085bd089a6c",
  "lastOpenFiles": [
    "coding/os/linux/memory/i_看懂服务器 CPU 内存支持，学会计算内存带宽.md",
    "coding/os/linux/memory/k_深入理解Linux内核页表映射分页机制原理.md",
    "zx99-image/Pasted image 20241006090124.png",
    "zx99-image/Pasted image 20241006090723.png",
    "README.md",
    "zx99-image/Pasted image 20241006090617.png",
    "zx99-image/Pasted image 20241006090503.png",
    "zx99-image/Pasted image 20241006090451.png",
    "zx99-image/Pasted image 20241006090437.png",
    "zx99-image/Pasted image 20241006090234.png",
    "zx99-image/Pasted image 20241006090227.png",
    "zx99-image/Pasted image 20241006090204.png",
    "zx99-image/Pasted image 20241006090157.png",
    "coding/os/linux/memory/a_从内核世界透视 mmap 内存映射的本质（源码实现篇）.md",
    "coding/os/linux/memory/LWN：针对每个调用点设置slab cache来防护heap-spray！.md",
    "coding/os/FreeRTOS/k_FreeRTOS学习笔记 基础知识体系梳理.md",
    "coding/os/ARM/c_为什么会有“ARMv8A Architecture”这个分类.md",
    "coding/os/ARM/init/b_ARM64的启动过程之（一）：内核第一个脚印.md",
    "coding/os/ARM/init/b_ARM64的启动过程之（二）：创建启动阶段的页表.md",
    "coding/compiler/b_编译乱序(Compiler Reordering).md",
    "coding/compiler/k_利用Makfile给多文件、多目录C源码建立工程.md",
    "auxiliary/self-improvement/hair/hair-quote.md",
    "0x01-leetcode/2-dimensional/tree/binary-search-tree/e_783. Minimum Distance Between BST Nodes.md",
    "auxiliary/self-improvement/Chrisma/Untitled",
    "interview/c_华为OD笔试面试参考.md",
    "coding/coding-quote.md",
    "coding/os/不是 Windows，也不是 Linux，Shrine 才是“神之操作系统”.md",
    "coding/reverse-engineering/b_RISC-V架构系列之1：指令集和特权模式.md",
    "coding/reverse-engineering/k_浅谈编译器对代码的优化.md",
    "coding/reverse-engineering/i_链接加载原理及ELF文件格式.md",
    "coding/reverse-engineering/bn_内核、容器与eBPF攻防初探.md",
    "coding/reverse-engineering/n_内核学习-异常处理(win).md",
    "coding/reverse-engineering/k_ARM64 的多核启动流程分析.md",
    "coding/reverse-engineering/bn_16位实模式切换32位保护模式过程详解.md",
    "coding/reverse-engineering/bn_高Glibc版本下的堆骚操作解析.md",
    "coding/reverse-engineering/an_VM逆向，一篇就够了.md",
    "coding/reverse-engineering/kn_一文搞懂  ARM MMU.md",
    "Untitled.canvas",
    "coding/cpp/grammar/Untitled",
    "0x01-leetcode/2-dimensional/tree/binary-search-tree/delete",
    "0x01-leetcode/2-dimensional/tree/binary-search-tree/unique-BST",
    "0x01-leetcode/2-dimensional/tree/binary-search-tree",
    "0x01-leetcode/2-dimensional/tree/path-sum",
    "0x01-leetcode/2-dimensional/tree/traversal/postorder",
    "0x01-leetcode/2-dimensional/tree/traversal/inorder",
    "0x01-leetcode/2-dimensional/tree/traversal/preorder",
    "0x01-leetcode/2-dimensional/tree/traversal/level-order/populate-right-pointer",
    "0x01-leetcode/math-logic/Untitled.canvas",
    "0x01-leetcode/1-dimensional/linked-list/Untitled.canvas"
  ]
}