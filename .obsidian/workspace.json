{
  "main": {
    "id": "1be727c92b2e14f0",
    "type": "split",
    "children": [
      {
        "id": "30d24f811d1b06b5",
        "type": "tabs",
        "children": [
          {
            "id": "550c24418126d846",
            "type": "leaf",
            "state": {
              "type": "markdown",
              "state": {
                "file": "coding/os/linux/memory/memory-manage/Linux Kernel：内存分页机制核心原理.md",
                "mode": "source",
                "source": false
              }
            }
          }
        ]
      }
    ],
    "direction": "vertical"
  },
  "left": {
    "id": "daa24d14e57a5bba",
    "type": "split",
    "children": [
      {
        "id": "754e0d401164d83b",
        "type": "tabs",
        "children": [
          {
            "id": "97c141a77dfb8bbf",
            "type": "leaf",
            "state": {
              "type": "file-explorer",
              "state": {
                "sortOrder": "alphabetical"
              }
            }
          },
          {
            "id": "3024df327b38b2bb",
            "type": "leaf",
            "state": {
              "type": "search",
              "state": {
                "query": "图解 Linux  管道通信的原理？",
                "matchingCase": false,
                "explainSearch": false,
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical"
              }
            }
          },
          {
            "id": "d16b970b8dd24de1",
            "type": "leaf",
            "state": {
              "type": "bookmarks",
              "state": {}
            }
          }
        ]
      }
    ],
    "direction": "horizontal",
    "width": 300
  },
  "right": {
    "id": "0ed372e18b255e27",
    "type": "split",
    "children": [
      {
        "id": "c082f741bebf07bf",
        "type": "tabs",
        "children": [
          {
            "id": "510cec816bc213d3",
            "type": "leaf",
            "state": {
              "type": "backlink",
              "state": {
                "file": "coding/os/linux/memory/memory-manage/Linux Kernel：内存分页机制核心原理.md",
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical",
                "showSearch": false,
                "searchQuery": "",
                "backlinkCollapsed": false,
                "unlinkedCollapsed": true
              }
            }
          },
          {
            "id": "cc3f2ddc07078680",
            "type": "leaf",
            "state": {
              "type": "outgoing-link",
              "state": {
                "file": "coding/os/linux/memory/memory-manage/Linux Kernel：内存分页机制核心原理.md",
                "linksCollapsed": false,
                "unlinkedCollapsed": true
              }
            }
          },
          {
            "id": "3ad12460d1b0e66d",
            "type": "leaf",
            "state": {
              "type": "tag",
              "state": {
                "sortOrder": "frequency",
                "useHierarchy": true
              }
            }
          },
          {
            "id": "22fe08aa63327cdd",
            "type": "leaf",
            "state": {
              "type": "outline",
              "state": {
                "file": "coding/os/linux/memory/memory-manage/Linux Kernel：内存分页机制核心原理.md"
              }
            }
          }
        ]
      }
    ],
    "direction": "horizontal",
    "width": 300,
    "collapsed": true
  },
  "left-ribbon": {
    "hiddenItems": {
      "switcher:Open quick switcher": false,
      "graph:Open graph view": false,
      "canvas:Create new canvas": false,
      "daily-notes:Open today's daily note": false,
      "templates:Insert template": false,
      "command-palette:Open command palette": false
    }
  },
  "active": "550c24418126d846",
  "lastOpenFiles": [
    "0x99-image/Pasted image 20240915201541.png",
    "coding/os/linux/memory/memory-manage/Linux Kernel：内存分页机制核心原理.md",
    "0x99-image/Pasted image 20240915201600.png",
    "0x99-image/Pasted image 20240915201554.png",
    "0x99-image/Pasted image 20240915201548.png",
    "coding/os/linux/memory/memory-manage/i_文件系统和裸块设备的page cache问题.md",
    "coding/os/linux/memory/memory-manage/b_linux内存回收(一）---kswapd回收.md",
    "test/next_step.md",
    "0x99-image/Pasted image 20240915164551.png",
    "0x99-image/Pasted image 20240915195922.png",
    "0x99-image/Pasted image 20240915195915.png",
    "0x99-image/Pasted image 20240915195910.png",
    "0x99-image/Pasted image 20240915195905.png",
    "0x99-image/Pasted image 20240915195859.png",
    "coding/os/linux/memory/memory-manage/i_fixmap addresses原理.md",
    "coding/os/linux/memory/memory-manage/i_Fix-Mapped Addresses.md",
    "coding/os/linux/memory/memory-manage/i_Linux kernel scatterlist API介绍.md",
    "coding/os/linux/memory/memory-manage/i_KSM机制剖析 — Linux 内核中的内存去耦合.md",
    "test/self_notes.md",
    "coding/os/linux/memory/memory-manage/k_Linux 内存管理窥探：页面回收 (LRU).md",
    "coding/os/linux/memory/memory-model/k_计算机科学基础知识（一）The Memory Hierarchy.md",
    "coding/os/linux/memory/memory-model/a_聊聊内存模型与内存序.md",
    "coding/os/linux/memory/memory-model/i_内存一致性模型.md",
    "coding/os/linux/memory/memory-model/i_ARMv8之memory model.md",
    "coding/os/linux/memory/memory-model/k_Linux内存模型.md",
    "coding/os/ARM/i_ARMv8-a架构简介.md",
    "coding/os/ARM/i_ARM WFI和WFE指令.md",
    "coding/os/ARM/k_ARM64架构下地址翻译相关的宏定义.md",
    "coding/os/ARM/i_Atomic operation in aarch64.md",
    "coding/os/ARM/i_ARM概念梳理：Architecture, Core, CPU，SOC.md",
    "coding/os/ARM/k_系统总结ARM基础.md",
    "coding/os/ARM/i_Linux kernel中栈的介绍.md",
    "coding/os/ARM/i_ARMv8之Atomicity.md",
    "coding/os/ARM/i_ARMv8之Observability.md",
    "coding/os/ARM/init/ARM64的启动过程之（二）：创建启动阶段的页表.md",
    "coding/os/ARM/init",
    "coding/os/linux/device/device_tree",
    "coding/os/linux/device/device_model",
    "coding/os/linux/device/GPIO",
    "coding/os/linux/io/epoll",
    "coding/java/Spring",
    "coding/cpp/opensource/qt",
    "coding/cpp/opensource/protobuf",
    "coding/cpp/opensource/memory",
    "coding/cpp/opensource/boost",
    "Untitled.canvas"
  ]
}